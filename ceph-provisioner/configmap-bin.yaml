---
# Source: ceph-provisioners/templates/configmap-bin.yaml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-ceph-prov-bin"
data:
  bootstrap.sh: |
    #!/bin/bash
    
    
    
    set -ex
    ceph -s
    function ensure_pool () {
      ceph osd pool stats $1 || ceph osd pool create $1 $2
      local test_version=$(ceph tell osd.* version | egrep -c "nautilus|mimic|luminous" | xargs echo)
      if [[ ${test_version} -gt 0 ]]; then
        ceph osd pool application enable $1 $3
      fi
    }
    #ensure_pool volumes 8 cinder
    
    

  provisioner-cephfs-start.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    exec /usr/local/bin/cephfs-provisioner -id "${POD_NAME}"
    
  provisioner-cephfs-client-key-manager.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    CEPH_CEPHFS_KEY=$(kubectl get secret ${PVC_CEPH_CEPHFS_STORAGECLASS_ADMIN_SECRET_NAME} \
        --namespace=${PVC_CEPH_CEPHFS_STORAGECLASS_DEPLOYED_NAMESPACE} \
        -o json )
    
    ceph_activate_namespace() {
      kube_namespace=$1
      secret_type=$2
      secret_name=$3
      ceph_key=$4
      {
      cat <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
      name: "${secret_name}"
      labels:
        release_group: release-name
        application: ceph
        component: cephfs
    type: "${secret_type}"
    data:
      key: $( echo ${ceph_key} )
    EOF
      } | kubectl apply --namespace ${kube_namespace} -f -
    }
    
    if ! kubectl get --namespace ${DEPLOYMENT_NAMESPACE} secrets ${PVC_CEPH_CEPHFS_STORAGECLASS_USER_SECRET_NAME}; then
      ceph_activate_namespace \
        ${DEPLOYMENT_NAMESPACE} \
        "kubernetes.io/cephfs" \
        ${PVC_CEPH_CEPHFS_STORAGECLASS_USER_SECRET_NAME} \
        "$(echo ${CEPH_CEPHFS_KEY} | jq -r '.data | .[]')"
    fi
    

  provisioner-rbd-start.sh: |
    #!/bin/bash
    
    
    
    set -ex
    
    exec /usr/local/bin/rbd-provisioner -id "${POD_NAME}"
    
